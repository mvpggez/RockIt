[gd_scene load_steps=23 format=2]

[ext_resource path="res://Scene/World/Rocket/Head.tscn" type="PackedScene" id=1]
[ext_resource path="res://Asset/Rocket/Head/Head00.gltf" type="PackedScene" id=2]
[ext_resource path="res://Asset/Rocket/Head/Head01.gltf" type="PackedScene" id=3]
[ext_resource path="res://Scene/World/Rocket/Tank.tscn" type="PackedScene" id=4]
[ext_resource path="res://Asset/Rocket/Tank/Tank00.gltf" type="PackedScene" id=5]
[ext_resource path="res://Asset/Rocket/Tank/Tank01.gltf" type="PackedScene" id=6]
[ext_resource path="res://Scene/World/Rocket/Thruster.tscn" type="PackedScene" id=7]
[ext_resource path="res://Asset/Rocket/Thruster/Thruster00.gltf" type="PackedScene" id=8]
[ext_resource path="res://Asset/Rocket/Thruster/Thruster01.gltf" type="PackedScene" id=9]
[ext_resource path="res://Scene/World/Rocket/Booster.tscn" type="PackedScene" id=10]
[ext_resource path="res://Asset/Rocket/Booster/Booster00.gltf" type="PackedScene" id=11]
[ext_resource path="res://Asset/Rocket/Booster/Booster01.gltf" type="PackedScene" id=12]
[ext_resource path="res://Asset/Rocket/Particles/new_spheremesh.tres" type="SphereMesh" id=13]
[ext_resource path="res://Asset/Rocket/Particles/gradient_smoke_soft.tres" type="Gradient" id=14]
[ext_resource path="res://Asset/Rocket/Particles/gradient_smoke.tres" type="Gradient" id=15]





[sub_resource type="GDScript" id=1]
script/source = "extends RigidBody

var time = 0.0 #time passed since creation of this node
var time_last_integrate_forces = 0.0 #timestamp of the last time, integrate forces was called
var height = 0.0 #Height of the Rocket from ground to the top of the tank
var fuel_remaining = 0.0 #Remaining fuel
var booster_fuel_remaining = 0.0
var durability = 0 #How many obstacles can be destroyed?

enum ParticleMode {HALT, WAITING, LAUNCHING, NORMAL, BOOST}
var particle_mode = ParticleMode.HALT

#rocket levels (unsafe)
export var head_level = 0
export var tank_level = 0
export var thruster_level = 0
export var booster_level = 0

func _ready():
	rebuildRocket()

func _physics_process(delta):
	time += delta

func rebuildRocket():
	var head = get_head()
	var tank = get_tank()
	var thruster = get_thruster()
	var booster = get_booster()
	
	#clear all parts
	for child in get_head_by_level(max(0,head_level-1)).get_children():
		child.free()
	for child in get_tank_by_level(max(0,tank_level-1)).get_children():
		child.free()
	for child in get_thruster_by_level(max(0,thruster_level-1)).get_children():
		child.free()
	#for child in $\"Booster\".get_children():
	#	child.free()
	
	#reset height
	height = 0.0
	
	#instance 3d parts
	#note, that every part translates by its own offset and the height of the parts underneath
	thruster.add_child(thruster.mesh_resource.instance())
	thruster.translate(thruster.mesh_offset)
	height += thruster.mesh_height
	
	tank.add_child(tank.mesh_resource.instance())
	tank.translate(tank.mesh_offset+Vector3(0, height, 0))
	height += tank.mesh_height
	
	head.add_child(head.mesh_resource.instance())
	head.translate(head.mesh_offset+Vector3(0, height, 0))
	
	#Set startvalue for fuel
	fuel_remaining = tank.capacity
	#Set startvalue for fuel
	booster_fuel_remaining = booster.capacity
	#Set startvalue for durability
	durability = head.durability

func _integrate_forces(state):
	#custom delta-implementation
	var delta = time - time_last_integrate_forces
	time_last_integrate_forces = time
	
	#keep integrate_forces updated
	add_central_force(self.transform.basis.xform(Vector3(0,0.01,0))) 
	
	#you can only control the rocket as long as you have fuel
	if fuel_remaining > 0: 
		if not Input.is_action_pressed(\"ui_down\"):
			#add_central_force needs the force in global space
			add_central_force(self.transform.basis.xform(Vector3(0,get_thruster().thrust,0))) 
			fuel_remaining -= get_thruster().fuel_consumption*delta
			set_particle_mode(ParticleMode.NORMAL)
		else:
			set_particle_mode(ParticleMode.HALT)
		#Version 1: Apply force from Thrusters on the head
		if Input.is_action_pressed(\"ui_right\"):	
			add_force(self.transform.basis.xform(Vector3(get_head().thrust,0,0)), Vector3(0.0, height, 0.0)) 
			fuel_remaining -= get_head().fuel_consumption*delta
		if Input.is_action_pressed(\"ui_left\"):
			add_force(self.transform.basis.xform(Vector3(-get_head().thrust,0,0)), Vector3(0.0, height, 0.0)) 
			fuel_remaining -= get_head().fuel_consumption*delta
	
		if fuel_remaining < 0:
			fuel_remaining = 0
			set_particle_mode(ParticleMode.HALT)
	else:
		set_particle_mode(ParticleMode.HALT)
	if booster_fuel_remaining > 0:
		if Input.is_action_pressed(\"ui_up\"):
			#add_central_force needs the force in global space
			add_central_force(self.transform.basis.xform(Vector3(0,get_booster().thrust,0))) 
			booster_fuel_remaining -= get_booster().fuel_consumption*delta
			set_particle_mode(ParticleMode.BOOST)
			if booster_fuel_remaining < 0:
				booster_fuel_remaining = 0
			
	for collider in get_colliding_bodies():
		if collider.is_in_group(\"Obstacle\"):
			if durability > 0:
				collider.get_parent().free_obstacle(collider)
				durability-=1
			
func get_fuel():
	return fuel_remaining
	
func get_booster_fuel():
	return booster_fuel_remaining
	
func get_height():
	return translation.y
	
func get_velocity():
	return linear_velocity
	
func get_acceleration():
	return linear_velocity #TODO: Change
	
func get_center():
	var center = translation
	center += transform.basis.xform(Vector3(0,height/2,0))
	return center

func set_particle_mode(value):
	if particle_mode == value:
		return
	if particle_mode == ParticleMode.NORMAL:
		for emitter in $normal.get_children():
			emitter.emitting = false
	elif particle_mode == ParticleMode.WAITING:
		for emitter in $waiting.get_children():
			emitter.emitting = false
	elif particle_mode == ParticleMode.LAUNCHING:
		for emitter in $launching.get_children():
			emitter.emitting = false
	elif particle_mode == ParticleMode.BOOST:
		for emitter in $fast.get_children():
			emitter.emitting = false
				
	if value == ParticleMode.NORMAL:
		for emitter in $normal.get_children():
			emitter.emitting = true
	elif value == ParticleMode.WAITING:
		for emitter in $waiting.get_children():
			emitter.emitting = true
	elif value == ParticleMode.LAUNCHING:
		for emitter in $launching.get_children():
			emitter.emitting = true
	elif value == ParticleMode.BOOST:
		for emitter in $fast.get_children():
			emitter.emitting = true
			
			
	particle_mode = value

func get_head():
	return $Heads.get_child(head_level)
func get_tank():
	return $Tanks.get_child(tank_level)
func get_thruster():
	return $Thrusters.get_child(thruster_level)
func get_booster():
	return $Boosters.get_child(booster_level)
	
func get_head_by_level(level):
	return $Heads.get_child(level)
func get_tank_by_level(level):
	return $Tanks.get_child(level)
func get_thruster_by_level(level):
	return $Thrusters.get_child(level)
func get_booster_by_level(level):
	return $Boosters.get_child(level)"

[sub_resource type="CubeMesh" id=2]
size = Vector3( 2, 5, 2 )

[sub_resource type="PrismMesh" id=3]

[sub_resource type="BoxShape" id=4]
extents = Vector3( 1, 2.5, 1 )

[sub_resource type="Gradient" id=5]
colors = PoolColorArray( 1, 0.64093, 0.132813, 1, 1, 0.967773, 0.625, 1 )

[sub_resource type="Curve" id=6]
_data = [ Vector2( 0.0417707, 1 ), 0.0, 0.0, 0, 0, Vector2( 0.997952, 0.621 ), -0.955493, 0.0, 0, 0 ]

[sub_resource type="Curve" id=7]
min_value = -1.0
_data = [ Vector2( 0.00346667, 0.3366 ), 0.0, 0.0, 0, 0, Vector2( 0.622005, 0.6182 ), 0.0, 0.0, 0, 0, Vector2( 0.988021, 0.6006 ), 0.0, 0.0, 0, 0 ]

[node name="Rocket" type="RigidBody"]
contacts_reported = 1
contact_monitor = true
axis_lock_linear_z = true
axis_lock_angular_x = true
axis_lock_angular_y = true
script = SubResource( 1 )

[node name="Heads" type="Spatial" parent="."]

[node name="Head" parent="Heads" instance=ExtResource( 1 )]
mesh_resource = ExtResource( 2 )
mesh_offset = Vector3( 0, 0.5, 0 )
thrust = 1.0

[node name="Head1" parent="Heads" instance=ExtResource( 1 )]
mesh_resource = ExtResource( 3 )
mesh_offset = Vector3( 0, 0.4, 0 )
thrust = 2.0

[node name="Tanks" type="Spatial" parent="."]

[node name="Tank" parent="Tanks" instance=ExtResource( 4 )]
mesh_resource = ExtResource( 5 )
mesh_offset = Vector3( 0, 1.3, 0 )
mesh_height = 3.5

[node name="Tank1" parent="Tanks" instance=ExtResource( 4 )]
mesh_resource = ExtResource( 6 )
mesh_offset = Vector3( 0, 1.7, 0 )
mesh_height = 3.5

[node name="Thrusters" type="Spatial" parent="."]

[node name="Thruster" parent="Thrusters" instance=ExtResource( 7 )]
mesh_resource = ExtResource( 8 )
mesh_offset = Vector3( 0, 0.5, 0 )
mesh_height = 1.0

[node name="Thruster1" parent="Thrusters" instance=ExtResource( 7 )]
mesh_resource = ExtResource( 9 )
mesh_offset = Vector3( 0, 0.5, 0 )
mesh_height = 1.0
thrust = 20.0

[node name="Boosters" type="Spatial" parent="."]

[node name="Booster" parent="Boosters" instance=ExtResource( 10 )]
mesh_resource = ExtResource( 11 )

[node name="Booster1" parent="Boosters" instance=ExtResource( 10 )]
mesh_resource = ExtResource( 12 )

[node name="MeshInstance" type="MeshInstance" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 2.5, 0 )
visible = false
mesh = SubResource( 2 )
material/0 = null

[node name="MeshInstance2" type="MeshInstance" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 3.45323, 0 )
visible = false
mesh = SubResource( 3 )
material/0 = null

[node name="CollisionShape" type="CollisionShape" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 2.5, 0 )
shape = SubResource( 4 )

[node name="waiting" type="Spatial" parent="."]

[node name="CPUParticles_right" type="CPUParticles" parent="waiting"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -0.376674, 0 )
emitting = false
speed_scale = 0.9
local_coords = false
mesh = ExtResource( 13 )
spread = 180.0
gravity = Vector3( 2, -0.5, 0.5 )
angular_velocity = 8.40779e-45
color_ramp = ExtResource( 14 )

[node name="CPUParticles_left" type="CPUParticles" parent="waiting"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -0.376674, 0 )
emitting = false
speed_scale = 0.9
local_coords = false
mesh = ExtResource( 13 )
spread = 180.0
gravity = Vector3( -2, -0.5, 0 )
angular_velocity = 0.030303

[node name="prep" type="Spatial" parent="."]

[node name="CPUParticles_right" type="CPUParticles" parent="prep"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -0.376674, 0 )
emitting = false
amount = 16
local_coords = false
mesh = ExtResource( 13 )
spread = 180.0
gravity = Vector3( 5, -2, 0.5 )
angular_velocity = 0.0185445
color_ramp = ExtResource( 15 )

[node name="CPUParticles_left" type="CPUParticles" parent="prep"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -0.376674, 0 )
emitting = false
amount = 16
speed_scale = 1.1
local_coords = false
mesh = ExtResource( 13 )
spread = 180.0
gravity = Vector3( -5, -2, 0 )
angular_velocity = 4.58869e-41
scale_amount_random = 1.0
color_ramp = ExtResource( 15 )

[node name="normal" type="Spatial" parent="."]

[node name="CPUParticles2" type="CPUParticles" parent="normal"]
emitting = false
amount = 16
speed_scale = 2.0
local_coords = false
mesh = ExtResource( 13 )
scale_amount = 0.6
color_ramp = SubResource( 5 )

[node name="fast" type="Spatial" parent="."]

[node name="CPUParticles2" type="CPUParticles" parent="fast"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -1.68903, 0 )
emitting = false
amount = 4
speed_scale = 4.0
local_coords = false
mesh = ExtResource( 13 )
spread = 7.46
angular_velocity = -380.001
scale_amount_curve = SubResource( 6 )
hue_variation = 0.56
hue_variation_curve = SubResource( 7 )
