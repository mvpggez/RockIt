[gd_scene load_steps=2 format=2]

[sub_resource type="GDScript" id=1]
script/source = "extends Spatial

export var despawn_distance = 70.0

#Concept:
#The obstacle spawner spawns and despawns the obstacles under the following conditions:
#An obstacle is spawned iff the rocket is between min- and max-height and there are 
#less than max_count obstacles between rocket_distance_near and rocket_distance_far
#It is spawned to a random location between rocket_distance_near and rocket_distance_far
#above the player, where the min_distance to the other obstacles is respected
#An obstacle is despawned iff its distance to the rocket exceeds rocket_distance_far

func _physics_process(delta):
	var position = get_node(\"../Rocket\").get_global_transform().origin
	#despawn on given condition
	for child in get_children():
		for grandchild in child.get_children():
			var distance = (grandchild.get_global_transform().origin-position).length()
			if distance >= despawn_distance:
				child.free_obstacle(grandchild)
		#elif distance >= rocket_distance_near and child.get_global_transform().origin.y>position.y:
		#	count+=1

func spawn_obstacle(spawner, obstacle_resource, spawn_distance_near, spawn_distance_far, min_scale, max_scale):
	var position = get_node(\"../Rocket\").get_global_transform().origin
	var instance = obstacle_resource.instance()
	
	#generate random position
	var x_temp = randf()*2-1
	var generated_position = Vector3(x_temp,
									 sin(acos(x_temp)),
									 0.0)*(randf()*(spawn_distance_far-spawn_distance_near)+spawn_distance_near)
	generated_position+=position
	
	for child in get_children():
		for grandchild in child.get_children():
			if (generated_position-grandchild.translation).length() < spawner.min_distance:
				instance.free()
				return
	
	#Alternative random distribution:
	#var random_angle = randf()*PI
	#var generated_position = Vector3(cos(random_angle),
	#								 sin(random_angle),
	#								 0.0)*(randf()*(rocket_distance_far-rocket_distance_near)+rocket_distance_near)
	
	spawner.add_child(instance)
	spawner.current_count += 1
	instance.translate(generated_position)
	instance.rotate_y(randf()*PI*2)
	var temp_scale = randf()*(max_scale-min_scale)+min_scale 
	instance.global_scale(Vector3(temp_scale,temp_scale,temp_scale))
"

[node name="ObstacleManager" type="Spatial"]
script = SubResource( 1 )
